#+STARTUP: hidestars
#+TODO: TODO(t!) FOCUSED (f@/!) STARTED(s@/!) WAITING(w@/!) SOMEDAY(S@/!) URGENT (u!) | DONE(d!) CANCELLED(c@!)

*Programmation comparée 2019*

Sous Emacs, utiliser [TAB] pour ouvrir ou fermer les différentes sections.

* Comment lire ce qui suit?
  À chaque séance, vous *devez* effectuer la liste des tâches.
  Les tâches préfixées par "Discussion" ou "Cours" sont faites en groupe-classe.
  Les autres tâches sont faites en petits groupes ou individuellement.

* Séances
** <2019-01-07>
*** Introduction du cours
    - Motivations du cours
    - Qu'est-ce qu'un langage de programmation?
    - Comment catégoriser les langages de programmation?
    - Qu'est-ce qu'un style de programmation?
    - Comment étudier les styles de programmation?
    - Fonctionnement du cours
*** Un premier défi et deux expériences
    - Voir defis/0
    - Explication du code:
      - Toujours procéder du général au particulier.
      - Comment se convaincre de la correction d'un programme?
    - Comment évaluer du code?
"Any fool can write code that a computer can understand. Good programmers write code that humans can understand." - Martin Fowler
*** Projet
**** Sujet
     - Un tableur multi-site, multi-utilisateur pour le bigdata.
**** Contraintes de cette année
***** Approches
- dans un style fonctionnel pur ;
- avec le framework Spark / Spark Streaming / Apache Storm :
- en orienté objet ;
- en utilisant un GPU ;
- en programmation réactive ;
- en théorie des types.
***** Langages
- Rust, Julia, ReactiveML, Scala, C, Java, Idris, Haskell, OCaml,
  ReasonML, Purescript, Typescript, Go, Elixir, Python.
*** Choses à faire
**** DONE S'inscrire sur le GIT
     - State "DONE"       from "TODO"       [2019-01-07 Mon 12:17]
**** DONE S'inscrire sur Framapad
     - State "DONE"       from "TODO"       [2019-01-07 Mon 12:17]
**** TODO Discussion: Défi 0
**** TODO Discussion: Défi 1
**** TODO Former les groupes de projet
**** TODO Faire son choix de contraintes
**** TODO Se documenter sur 'git' (comment faire une branche, une pull-request, etc)
**** TODO Se documenter sur 'Docker'
**** TODO Lire https://en.wikipedia.org/wiki/Programming_paradigm
**** TODO Lire https://en.wikipedia.org/wiki/Comparison_of_programming_languages
** <2019-01-14>
*** Retour sur le défi 0
    - Retour sur la grille d'évaluation de la qualité du code
    - Expérience d'évaluation de code : évaluez le code de quelqu'un d'autre.
    - Synthèse : qu'avez-vous appris?
*** Début du défi 1
    - Affectation des contraintes de programmation
    - Début d'analyse de la spécification, objectif: chaque groupe propose une architecture.
** <2019-01-21>
*** Défi 1
**** TODO Analyser le défi 1
**** TODO Proposer et présenter une architecture pour résoudre le défi 1
**** TODO Programmer une solution au défi 1
**** TODO Faire une pull-request "soignée" pour présenter votre solution
*** La crise du logiciel et la programmation structurée
**** TODO Lire https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf
**** TODO Lire http://oberon2005.oberoncore.ru/classics/dk1974b.pdf
** <2019-01-28>
*** Défi 1
**** TODO Présentation de chaque PR
**** TODO Comment faire une revue de code?
**** TODO Revues de code
**** TODO Retours sur la revue de code
*** Histoire des langages de programmation
**** TODO Discuter des deux articles à lire pour aujourd'hui
** <2019-02-04>
*** DONE Fixer les dates des présentations-cours
    - State "DONE"       from "TODO"       [2019-02-04 Mon 09:42]
    - 18/02 : aquamen
    - 25/02 : GoF
    - 04/03 : madz
    - 11/03 : triplek
    - 18/03 : zozozo
*** Défi 1
    - Intégration des pull-requests
    - Validation fonctionnelle
*** Défi 2
    - Performances
    - Des questions de bas-niveau
*** Histoire des langages de programmation
    - Analyse de l'article de Knuth
    - Cours : programmation procédurale
    - Cours : programmation fonctionnellle
